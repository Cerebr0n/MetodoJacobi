package metodojacobi;

import java.util.Arrays;

public class MetodoJacobi {
    public static void main(String[] args) {
        double[][] A = {{10, -1, 2, 0}, {-1, 11, -1, 3}, {2, -1, 10, -1}, {0, 3, -1, 8}};
        double[] b = {6, 25, -11, 15};
        double[] x0 = {0, 0, 0, 0};
        double[] x = jacobi(A, b, x0, 0.0001, 100);
        System.out.println(Arrays.toString(x));
    }

    public static double[] jacobi(double[][] A, double[] b, double[] x0, double tol, int iterMax) {
        int n = b.length;
        double[] x = new double[n];
        double[] xp = new double[n];
        double error = tol + 1;
        int k = 0;
        while (error > tol && k < iterMax) {
            for (int i = 0; i < n; i++) {
                double s = 0;
                for (int j = 0; j < n; j++) {
                    if (i != j) {
                        s += A[i][j] * x0[j];
                    }
                }
                xp[i] = (b[i] - s) / A[i][i];
            }
            error = normaDiferencia(xp, x0) / normaVector(xp);
            x0 = xp.clone();
            k++;
        }
        if (k == iterMax) {
            System.out.println("MÃ©todo no converge en " + iterMax + " iteraciones.");
        }
        return xp;
    }

    public static double normaDiferencia(double[] x, double[] y) {
        double s = 0;
        for (int i = 0; i < x.length; i++) {
            s += Math.pow(x[i] - y[i], 2);
        }
        return Math.sqrt(s);
    }

    public static double normaVector(double[] x) {
        double s = 0;
        for (int i = 0; i < x.length; i++) {
            s += Math.pow(x[i], 2);
        }
        return Math.sqrt(s);
    }
}
